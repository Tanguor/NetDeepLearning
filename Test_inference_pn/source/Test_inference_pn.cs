/*****************************************************************************
 * File generated by HDevelop Version 22.11
 *
 * Do not modify!
 *****************************************************************************/

using System;
using System.IO;
using HalconDotNet;


/*
 * If you use this class in your program, you have to 
 * link against hdevenginedotnet.dll and halcondotnet.dll.
 * The Dlls are located in ${HALCONROOT}/bin/dotnet[20|35].
 *
 * The wrapped .hdev or .hdpl files have to be located in the folder
 * that is specified in the static ResourcePath property of 
 * Test_inference_pn. 
 * By default, ResourcePath is ${binary_dir}/res_Test_inference_pn.
 *
 * It is recommended to compile an assembly from this file using
 * the generated CMakeLists.txt.
 */

namespace Test_inference_ns
{
  public static class Test_inference_pn
  {

    public static void apply_colorscheme_on_gray_value_image(
        HObject InputImage,
        out HObject ResultImage,
        HTuple Schema)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _apply_colorscheme_on_gray_value_image.Value.CreateCall())
      {
        SetParameter(call,"InputImage",InputImage);
        SetParameter(call,"Schema",Schema);
        call.Execute();
        ResultImage = GetParameterHObject(call,"ResultImage");
      }
    }

    public static void check_data_availability(
        HTuple ExampleDataDir,
        HTuple PreprocessParamFileName,
        HTuple TrainedModelFileName,
        HTuple UsePretrainedModel)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _check_data_availability.Value.CreateCall())
      {
        SetParameter(call,"ExampleDataDir",ExampleDataDir);
        SetParameter(call,"PreprocessParamFileName",PreprocessParamFileName);
        SetParameter(call,"TrainedModelFileName",TrainedModelFileName);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
      }
    }

    public static void check_dl_preprocess_param_COPY_1(
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _check_dl_preprocess_param_COPY_1.Value.CreateCall())
      {
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void color_string_to_rgb(
        HTuple Color,
        out HTuple RGB)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _color_string_to_rgb.Value.CreateCall())
      {
        SetParameter(call,"Color",Color);
        call.Execute();
        RGB = GetParameterHTuple(call,"RGB");
      }
    }

    public static void create_counting_result_text(
        HTuple NumberDetectionsPerClass,
        HTuple ClassNames,
        out HTuple Text,
        out HTuple TextColor,
        out HTuple TextBoxColor)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _create_counting_result_text.Value.CreateCall())
      {
        SetParameter(call,"NumberDetectionsPerClass",NumberDetectionsPerClass);
        SetParameter(call,"ClassNames",ClassNames);
        call.Execute();
        Text = GetParameterHTuple(call,"Text");
        TextColor = GetParameterHTuple(call,"TextColor");
        TextBoxColor = GetParameterHTuple(call,"TextBoxColor");
      }
    }

    public static void create_tiny_example_dataset_with_result(
        out HTuple DLDataset,
        out HTuple DLResult)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _create_tiny_example_dataset_with_result.Value.CreateCall())
      {
        call.Execute();
        DLDataset = GetParameterHTuple(call,"DLDataset");
        DLResult = GetParameterHTuple(call,"DLResult");
      }
    }

    public static void determine_optimum_pose_distance(
        HTuple ObjectModel3DID,
        HTuple CamParam,
        HTuple ImageCoverage,
        HTuple PoseIn,
        out HTuple PoseOut)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _determine_optimum_pose_distance.Value.CreateCall())
      {
        SetParameter(call,"ObjectModel3DID",ObjectModel3DID);
        SetParameter(call,"CamParam",CamParam);
        SetParameter(call,"ImageCoverage",ImageCoverage);
        SetParameter(call,"PoseIn",PoseIn);
        call.Execute();
        PoseOut = GetParameterHTuple(call,"PoseOut");
      }
    }

    public static void dev_close_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_legend_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_text_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_text_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_window_dict(
        HTuple WindowHandleDict)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_window_dict.Value.CreateCall())
      {
        SetParameter(call,"WindowHandleDict",WindowHandleDict);
        call.Execute();
      }
    }

    public static void dev_display_dl_data(
        HTuple DLSample,
        HTuple DLResult,
        HTuple DLDatasetInfo,
        HTuple KeysForDisplay,
        HTuple GenParam,
        HTuple WindowHandleDict)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_dl_data.Value.CreateCall())
      {
        SetParameter(call,"DLSample",DLSample);
        SetParameter(call,"DLResult",DLResult);
        SetParameter(call,"DLDatasetInfo",DLDatasetInfo);
        SetParameter(call,"KeysForDisplay",KeysForDisplay);
        SetParameter(call,"GenParam",GenParam);
        SetParameter(call,"WindowHandleDict",WindowHandleDict);
        call.Execute();
      }
    }

    public static void dev_display_example_reset_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_example_reset_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_device(
        HTuple ExampleInternals,
        HTuple DLDevice)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_device.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        SetParameter(call,"DLDevice",DLDevice);
        call.Execute();
      }
    }

    public static void dev_display_screen_example_images(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_example_images.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_final(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_final.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_1(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_1.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_2_part_1(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_2_part_1.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_2_part_2(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_2_part_2.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_3(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_3.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_introduction(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_introduction.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_max_overlap(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_max_overlap.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_max_overlap_class_agnostic(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_max_overlap_class_agnostic.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_min_confidence(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_min_confidence.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_run_program(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_run_program.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_example_init(
        HTuple ShowExampleScreens,
        HTuple UsePretrainedModel,
        out HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_example_init.Value.CreateCall())
      {
        SetParameter(call,"ShowExampleScreens",ShowExampleScreens);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
        ExampleInternals = GetParameterHTuple(call,"ExampleInternals");
      }
    }

    public static void dev_open_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_open_example_legend_window(
        HTuple ExampleInternals,
        HTuple WindowWidth)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        SetParameter(call,"WindowWidth",WindowWidth);
        call.Execute();
      }
    }

    public static void dev_open_example_text_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_text_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_open_window_fit_size(
        HTuple Row,
        HTuple Column,
        HTuple Width,
        HTuple Height,
        HTuple WidthLimit,
        HTuple HeightLimit,
        out HTuple WindowHandle)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_window_fit_size.Value.CreateCall())
      {
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Width",Width);
        SetParameter(call,"Height",Height);
        SetParameter(call,"WidthLimit",WidthLimit);
        SetParameter(call,"HeightLimit",HeightLimit);
        call.Execute();
        WindowHandle = GetParameterHTuple(call,"WindowHandle");
      }
    }

    public static void dev_update_off(
    )
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_update_off.Value.CreateCall())
      {
        call.Execute();
      }
    }

    public static void disp_continue_button(
        HTuple WindowHandle)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _disp_continue_button.Value.CreateCall())
      {
        SetParameter(call,"WindowHandle",WindowHandle);
        call.Execute();
      }
    }

    public static void disp_message(
        HTuple WindowHandle,
        HTuple String,
        HTuple CoordSystem,
        HTuple Row,
        HTuple Column,
        HTuple Color,
        HTuple Box)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _disp_message.Value.CreateCall())
      {
        SetParameter(call,"WindowHandle",WindowHandle);
        SetParameter(call,"String",String);
        SetParameter(call,"CoordSystem",CoordSystem);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Color",Color);
        SetParameter(call,"Box",Box);
        call.Execute();
      }
    }

    public static void disp_object_model_no_opengl(
        out HObject ModelContours,
        HTuple ObjectModel3DID,
        HTuple GenParamName,
        HTuple GenParamValue,
        HTuple WindowHandleBuffer,
        HTuple CamParam,
        HTuple PosesOut)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _disp_object_model_no_opengl.Value.CreateCall())
      {
        SetParameter(call,"ObjectModel3DID",ObjectModel3DID);
        SetParameter(call,"GenParamName",GenParamName);
        SetParameter(call,"GenParamValue",GenParamValue);
        SetParameter(call,"WindowHandleBuffer",WindowHandleBuffer);
        SetParameter(call,"CamParam",CamParam);
        SetParameter(call,"PosesOut",PosesOut);
        call.Execute();
        ModelContours = GetParameterHObject(call,"ModelContours");
      }
    }

    public static void disp_text_button(
        HTuple WindowHandle,
        HTuple String,
        HTuple CoordSystem,
        HTuple Row,
        HTuple Column,
        HTuple TextColor,
        HTuple ButtonColor)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _disp_text_button.Value.CreateCall())
      {
        SetParameter(call,"WindowHandle",WindowHandle);
        SetParameter(call,"String",String);
        SetParameter(call,"CoordSystem",CoordSystem);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"TextColor",TextColor);
        SetParameter(call,"ButtonColor",ButtonColor);
        call.Execute();
      }
    }

    public static void display_result_box(
        HObject Box,
        HTuple LineWidth,
        HTuple Colors,
        HTuple Text)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _display_result_box.Value.CreateCall())
      {
        SetParameter(call,"Box",Box);
        SetParameter(call,"LineWidth",LineWidth);
        SetParameter(call,"Colors",Colors);
        SetParameter(call,"Text",Text);
        call.Execute();
      }
    }

    public static void dump_image_output(
        HObject BackgroundImage,
        HTuple WindowHandleBuffer,
        HTuple Scene3D,
        HTuple AlphaOrig,
        HTuple ObjectModel3DID,
        HTuple GenParamName,
        HTuple GenParamValue,
        HTuple CamParam,
        HTuple Poses,
        HTuple ColorImage,
        HTuple Title,
        HTuple Information,
        HTuple Labels,
        HTuple VisualizeTrackball,
        HTuple DisplayContinueButton,
        HTuple TrackballCenterRow,
        HTuple TrackballCenterCol,
        HTuple TrackballRadiusPixel,
        HTuple SelectedObject,
        HTuple VisualizeRotationCenter,
        HTuple RotationCenter)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dump_image_output.Value.CreateCall())
      {
        SetParameter(call,"BackgroundImage",BackgroundImage);
        SetParameter(call,"WindowHandleBuffer",WindowHandleBuffer);
        SetParameter(call,"Scene3D",Scene3D);
        SetParameter(call,"AlphaOrig",AlphaOrig);
        SetParameter(call,"ObjectModel3DID",ObjectModel3DID);
        SetParameter(call,"GenParamName",GenParamName);
        SetParameter(call,"GenParamValue",GenParamValue);
        SetParameter(call,"CamParam",CamParam);
        SetParameter(call,"Poses",Poses);
        SetParameter(call,"ColorImage",ColorImage);
        SetParameter(call,"Title",Title);
        SetParameter(call,"Information",Information);
        SetParameter(call,"Labels",Labels);
        SetParameter(call,"VisualizeTrackball",VisualizeTrackball);
        SetParameter(call,"DisplayContinueButton",DisplayContinueButton);
        SetParameter(call,"TrackballCenterRow",TrackballCenterRow);
        SetParameter(call,"TrackballCenterCol",TrackballCenterCol);
        SetParameter(call,"TrackballRadiusPixel",TrackballRadiusPixel);
        SetParameter(call,"SelectedObject",SelectedObject);
        SetParameter(call,"VisualizeRotationCenter",VisualizeRotationCenter);
        SetParameter(call,"RotationCenter",RotationCenter);
        call.Execute();
      }
    }

    public static void gen_arrow_contour_xld(
        out HObject Arrow,
        HTuple Row1,
        HTuple Column1,
        HTuple Row2,
        HTuple Column2,
        HTuple HeadLength,
        HTuple HeadWidth)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_arrow_contour_xld.Value.CreateCall())
      {
        SetParameter(call,"Row1",Row1);
        SetParameter(call,"Column1",Column1);
        SetParameter(call,"Row2",Row2);
        SetParameter(call,"Column2",Column2);
        SetParameter(call,"HeadLength",HeadLength);
        SetParameter(call,"HeadWidth",HeadWidth);
        call.Execute();
        Arrow = GetParameterHObject(call,"Arrow");
      }
    }

    public static void gen_arrow_object_model_3d(
        HTuple ArrowThickness,
        HTuple ArrowStart,
        HTuple ArrowEnd,
        out HTuple OM3DArrow)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_arrow_object_model_3d.Value.CreateCall())
      {
        SetParameter(call,"ArrowThickness",ArrowThickness);
        SetParameter(call,"ArrowStart",ArrowStart);
        SetParameter(call,"ArrowEnd",ArrowEnd);
        call.Execute();
        OM3DArrow = GetParameterHTuple(call,"OM3DArrow");
      }
    }

    public static void gen_cam_par_area_scan_division(
        HTuple Focus,
        HTuple Kappa,
        HTuple Sx,
        HTuple Sy,
        HTuple Cx,
        HTuple Cy,
        HTuple ImageWidth,
        HTuple ImageHeight,
        out HTuple CameraParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_cam_par_area_scan_division.Value.CreateCall())
      {
        SetParameter(call,"Focus",Focus);
        SetParameter(call,"Kappa",Kappa);
        SetParameter(call,"Sx",Sx);
        SetParameter(call,"Sy",Sy);
        SetParameter(call,"Cx",Cx);
        SetParameter(call,"Cy",Cy);
        SetParameter(call,"ImageWidth",ImageWidth);
        SetParameter(call,"ImageHeight",ImageHeight);
        call.Execute();
        CameraParam = GetParameterHTuple(call,"CameraParam");
      }
    }

    public static void gen_dl_samples(
        HTuple DLDataset,
        HTuple SampleIndices,
        HTuple RestrictKeysDLSample,
        HTuple GenParam,
        out HTuple DLSampleBatch)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_dl_samples.Value.CreateCall())
      {
        SetParameter(call,"DLDataset",DLDataset);
        SetParameter(call,"SampleIndices",SampleIndices);
        SetParameter(call,"RestrictKeysDLSample",RestrictKeysDLSample);
        SetParameter(call,"GenParam",GenParam);
        call.Execute();
        DLSampleBatch = GetParameterHTuple(call,"DLSampleBatch");
      }
    }

    public static void gen_dl_samples_from_images(
        HObject Images,
        out HTuple DLSampleBatch)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_dl_samples_from_images.Value.CreateCall())
      {
        SetParameter(call,"Images",Images);
        call.Execute();
        DLSampleBatch = GetParameterHTuple(call,"DLSampleBatch");
      }
    }

    public static void gen_robot_tool_and_base_object_model_3d(
        HTuple ArrowThickness,
        HTuple ArrowLength,
        out HTuple OM3DToolOrigin,
        out HTuple OM3DBase)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _gen_robot_tool_and_base_object_model_3d.Value.CreateCall())
      {
        SetParameter(call,"ArrowThickness",ArrowThickness);
        SetParameter(call,"ArrowLength",ArrowLength);
        call.Execute();
        OM3DToolOrigin = GetParameterHTuple(call,"OM3DToolOrigin");
        OM3DBase = GetParameterHTuple(call,"OM3DBase");
      }
    }

    public static void get_cam_par_data(
        HTuple CameraParam,
        HTuple ParamName,
        out HTuple ParamValue)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_cam_par_data.Value.CreateCall())
      {
        SetParameter(call,"CameraParam",CameraParam);
        SetParameter(call,"ParamName",ParamName);
        call.Execute();
        ParamValue = GetParameterHTuple(call,"ParamValue");
      }
    }

    public static void get_cam_par_names(
        HTuple CameraParam,
        out HTuple CameraType,
        out HTuple ParamNames)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_cam_par_names.Value.CreateCall())
      {
        SetParameter(call,"CameraParam",CameraParam);
        call.Execute();
        CameraType = GetParameterHTuple(call,"CameraType");
        ParamNames = GetParameterHTuple(call,"ParamNames");
      }
    }

    public static void get_distinct_colors(
        HTuple NumColors,
        HTuple Random,
        HTuple StartColor,
        HTuple EndColor,
        out HTuple Colors)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_distinct_colors.Value.CreateCall())
      {
        SetParameter(call,"NumColors",NumColors);
        SetParameter(call,"Random",Random);
        SetParameter(call,"StartColor",StartColor);
        SetParameter(call,"EndColor",EndColor);
        call.Execute();
        Colors = GetParameterHTuple(call,"Colors");
      }
    }

    public static void get_dl_sample_image(
        out HObject Image,
        HTuple SampleKeys,
        HTuple DLSample,
        HTuple Key)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_dl_sample_image.Value.CreateCall())
      {
        SetParameter(call,"SampleKeys",SampleKeys);
        SetParameter(call,"DLSample",DLSample);
        SetParameter(call,"Key",Key);
        call.Execute();
        Image = GetParameterHObject(call,"Image");
      }
    }

    public static void get_example_inference_images(
        HTuple ImageDir,
        out HTuple ImageFiles)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_example_inference_images.Value.CreateCall())
      {
        SetParameter(call,"ImageDir",ImageDir);
        call.Execute();
        ImageFiles = GetParameterHTuple(call,"ImageFiles");
      }
    }

    public static void get_object_models_center(
        HTuple ObjectModel3DID,
        out HTuple Center)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_object_models_center.Value.CreateCall())
      {
        SetParameter(call,"ObjectModel3DID",ObjectModel3DID);
        call.Execute();
        Center = GetParameterHTuple(call,"Center");
      }
    }

    public static void make_neighboring_colors_distinguishable(
        HTuple ColorsRainbow,
        out HTuple Colors)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _make_neighboring_colors_distinguishable.Value.CreateCall())
      {
        SetParameter(call,"ColorsRainbow",ColorsRainbow);
        call.Execute();
        Colors = GetParameterHTuple(call,"Colors");
      }
    }

    public static void Oui(
        out HObject ImageBatch,
        HTuple UsePretrainedModel,
        HTuple DLDevice,
        out HTuple ExampleDir,
        out HTuple ImageDir,
        out HTuple ExampleDataDir,
        out HTuple PreprocessParamFileName,
        out HTuple RetrainedModelFileName,
        out HTuple DataDirectory,
        out HTuple BatchSizeInference,
        out HTuple MinConfidence,
        out HTuple MaxOverlap,
        out HTuple MaxOverlapClassAgnostic,
        out HTuple DLModelHandle,
        out HTuple DLPreprocessParam,
        out HTuple WindowHandleDict,
        out HTuple DLDataInfo,
        out HTuple ClassNames,
        out HTuple ClassIDs,
        out HTuple GenParam,
        out HTuple ImageFiles,
        out HTuple BatchIndex,
        out HTuple Batch,
        out HTuple DLSampleBatch,
        out HTuple DLResultBatch,
        out HTuple SampleIndex,
        out HTuple DLSample,
        out HTuple DLResult,
        out HTuple DetectedClassIDs,
        out HTuple NumberDetectionsPerClass,
        out HTuple Index,
        out HTuple Text,
        out HTuple TextColor,
        out HTuple TextBoxColor,
        out HTuple WindowHandles)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Oui.Value.CreateCall())
      {
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        SetParameter(call,"DLDevice",DLDevice);
        call.Execute();
        ImageBatch = GetParameterHObject(call,"ImageBatch");
        ExampleDir = GetParameterHTuple(call,"ExampleDir");
        ImageDir = GetParameterHTuple(call,"ImageDir");
        ExampleDataDir = GetParameterHTuple(call,"ExampleDataDir");
        PreprocessParamFileName = GetParameterHTuple(call,"PreprocessParamFileName");
        RetrainedModelFileName = GetParameterHTuple(call,"RetrainedModelFileName");
        DataDirectory = GetParameterHTuple(call,"DataDirectory");
        BatchSizeInference = GetParameterHTuple(call,"BatchSizeInference");
        MinConfidence = GetParameterHTuple(call,"MinConfidence");
        MaxOverlap = GetParameterHTuple(call,"MaxOverlap");
        MaxOverlapClassAgnostic = GetParameterHTuple(call,"MaxOverlapClassAgnostic");
        DLModelHandle = GetParameterHTuple(call,"DLModelHandle");
        DLPreprocessParam = GetParameterHTuple(call,"DLPreprocessParam");
        WindowHandleDict = GetParameterHTuple(call,"WindowHandleDict");
        DLDataInfo = GetParameterHTuple(call,"DLDataInfo");
        ClassNames = GetParameterHTuple(call,"ClassNames");
        ClassIDs = GetParameterHTuple(call,"ClassIDs");
        GenParam = GetParameterHTuple(call,"GenParam");
        ImageFiles = GetParameterHTuple(call,"ImageFiles");
        BatchIndex = GetParameterHTuple(call,"BatchIndex");
        Batch = GetParameterHTuple(call,"Batch");
        DLSampleBatch = GetParameterHTuple(call,"DLSampleBatch");
        DLResultBatch = GetParameterHTuple(call,"DLResultBatch");
        SampleIndex = GetParameterHTuple(call,"SampleIndex");
        DLSample = GetParameterHTuple(call,"DLSample");
        DLResult = GetParameterHTuple(call,"DLResult");
        DetectedClassIDs = GetParameterHTuple(call,"DetectedClassIDs");
        NumberDetectionsPerClass = GetParameterHTuple(call,"NumberDetectionsPerClass");
        Index = GetParameterHTuple(call,"Index");
        Text = GetParameterHTuple(call,"Text");
        TextColor = GetParameterHTuple(call,"TextColor");
        TextBoxColor = GetParameterHTuple(call,"TextBoxColor");
        WindowHandles = GetParameterHTuple(call,"WindowHandles");
      }
    }

    public static void preprocess_dl_model_3d_data(
        HTuple DLSample,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_3d_data.Value.CreateCall())
      {
        SetParameter(call,"DLSample",DLSample);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void preprocess_dl_model_anomaly(
        HObject AnomalyImages,
        out HObject AnomalyImagesPreprocessed,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_anomaly.Value.CreateCall())
      {
        SetParameter(call,"AnomalyImages",AnomalyImages);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
        AnomalyImagesPreprocessed = GetParameterHObject(call,"AnomalyImagesPreprocessed");
      }
    }

    public static void preprocess_dl_model_augmentation_data(
        HTuple DLSample,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_augmentation_data.Value.CreateCall())
      {
        SetParameter(call,"DLSample",DLSample);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void preprocess_dl_model_augmentation_data_COPY_1(
        HTuple DLSample,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_augmentation_data_COPY_1.Value.CreateCall())
      {
        SetParameter(call,"DLSample",DLSample);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void preprocess_dl_model_images(
        HObject Images,
        out HObject ImagesPreprocessed,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_images.Value.CreateCall())
      {
        SetParameter(call,"Images",Images);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
        ImagesPreprocessed = GetParameterHObject(call,"ImagesPreprocessed");
      }
    }

    public static void preprocess_dl_model_images_COPY_1(
        HObject Images,
        out HObject ImagesPreprocessed,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_images_COPY_1.Value.CreateCall())
      {
        SetParameter(call,"Images",Images);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
        ImagesPreprocessed = GetParameterHObject(call,"ImagesPreprocessed");
      }
    }

    public static void preprocess_dl_model_images_ocr_recognition(
        HObject Images,
        out HObject ImagesPreprocessed,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_images_ocr_recognition.Value.CreateCall())
      {
        SetParameter(call,"Images",Images);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
        ImagesPreprocessed = GetParameterHObject(call,"ImagesPreprocessed");
      }
    }

    public static void preprocess_dl_model_segmentations(
        HObject ImagesRaw,
        HObject Segmentations,
        out HObject SegmentationsPreprocessed,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_model_segmentations.Value.CreateCall())
      {
        SetParameter(call,"ImagesRaw",ImagesRaw);
        SetParameter(call,"Segmentations",Segmentations);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
        SegmentationsPreprocessed = GetParameterHObject(call,"SegmentationsPreprocessed");
      }
    }

    public static void preprocess_dl_samples(
        HTuple DLSampleBatch,
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _preprocess_dl_samples.Value.CreateCall())
      {
        SetParameter(call,"DLSampleBatch",DLSampleBatch);
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void replace_legacy_preprocessing_parameters_COPY_1(
        HTuple DLPreprocessParam)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _replace_legacy_preprocessing_parameters_COPY_1.Value.CreateCall())
      {
        SetParameter(call,"DLPreprocessParam",DLPreprocessParam);
        call.Execute();
      }
    }

    public static void scale_image_range(
        HObject Image,
        out HObject ImageScaled,
        HTuple Min,
        HTuple Max)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _scale_image_range.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Min",Min);
        SetParameter(call,"Max",Max);
        call.Execute();
        ImageScaled = GetParameterHObject(call,"ImageScaled");
      }
    }

    public static void set_cam_par_data(
        HTuple CameraParamIn,
        HTuple ParamName,
        HTuple ParamValue,
        out HTuple CameraParamOut)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _set_cam_par_data.Value.CreateCall())
      {
        SetParameter(call,"CameraParamIn",CameraParamIn);
        SetParameter(call,"ParamName",ParamName);
        SetParameter(call,"ParamValue",ParamValue);
        call.Execute();
        CameraParamOut = GetParameterHTuple(call,"CameraParamOut");
      }
    }

    public static void set_display_font(
        HTuple WindowHandle,
        HTuple Size,
        HTuple Font,
        HTuple Bold,
        HTuple Slant)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _set_display_font.Value.CreateCall())
      {
        SetParameter(call,"WindowHandle",WindowHandle);
        SetParameter(call,"Size",Size);
        SetParameter(call,"Font",Font);
        SetParameter(call,"Bold",Bold);
        SetParameter(call,"Slant",Slant);
        call.Execute();
      }
    }

    public static void tuple_shuffle(
        HTuple Tuple,
        out HTuple Shuffled)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _tuple_shuffle.Value.CreateCall())
      {
        SetParameter(call,"Tuple",Tuple);
        call.Execute();
        Shuffled = GetParameterHTuple(call,"Shuffled");
      }
    }

    public static void tuple_vector_cross_product(
        HTuple V1,
        HTuple V2,
        out HTuple VC)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _tuple_vector_cross_product.Value.CreateCall())
      {
        SetParameter(call,"V1",V1);
        SetParameter(call,"V2",V2);
        call.Execute();
        VC = GetParameterHTuple(call,"VC");
      }
    }

    public static void visualize_object_model_3d(
        HTuple WindowHandle,
        HTuple ObjectModel3D,
        HTuple CamParam,
        HTuple PoseIn,
        HTuple GenParamName,
        HTuple GenParamValue,
        HTuple Title,
        HTuple Label,
        HTuple Information,
        out HTuple PoseOut)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _visualize_object_model_3d.Value.CreateCall())
      {
        SetParameter(call,"WindowHandle",WindowHandle);
        SetParameter(call,"ObjectModel3D",ObjectModel3D);
        SetParameter(call,"CamParam",CamParam);
        SetParameter(call,"PoseIn",PoseIn);
        SetParameter(call,"GenParamName",GenParamName);
        SetParameter(call,"GenParamValue",GenParamValue);
        SetParameter(call,"Title",Title);
        SetParameter(call,"Label",Label);
        SetParameter(call,"Information",Information);
        call.Execute();
        PoseOut = GetParameterHTuple(call,"PoseOut");
      }
    }

    public static void xyz_attrib_to_object_model_3d(
        HObject X,
        HObject Y,
        HObject Z,
        HObject AttribImage,
        HTuple AttribName,
        out HTuple ObjectModel3D)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _xyz_attrib_to_object_model_3d.Value.CreateCall())
      {
        SetParameter(call,"X",X);
        SetParameter(call,"Y",Y);
        SetParameter(call,"Z",Z);
        SetParameter(call,"AttribImage",AttribImage);
        SetParameter(call,"AttribName",AttribName);
        call.Execute();
        ObjectModel3D = GetParameterHTuple(call,"ObjectModel3D");
      }
    }


    /****************************************************************************
    * ResourcePath
    *****************************************************************************
    * Use ResourcePath in your application to specify the location of the 
    * HDevelop script or procedure library.
    *****************************************************************************/
    public static string ResourcePath
    {
      get
      {
        return _resource_path;
      }
      set
      {
        lock(_procedure_path_lock)
        {
          _procedure_path_initialized = false;
        }
        _resource_path = value;
      }
    }

#region Implementation details

    /* Implementation details of the wrapper class.
     * You do not have to use these functions ever.
     */

    private static bool _procedure_path_initialized = false;
    private static object _procedure_path_lock = new object();

    private static string _resource_path = "./res_Test_inference_pn";

    private static Lazy<HDevProgram> _Program
            = new Lazy<HDevProgram>(() => new HDevProgram(Path.Combine(Test_inference_pn.ResourcePath, "Test_infer.hdev")));
    private static Lazy<HDevProcedure> _apply_colorscheme_on_gray_value_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "apply_colorscheme_on_gray_value_image"));
    private static Lazy<HDevProcedure> _check_data_availability
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "check_data_availability"));
    private static Lazy<HDevProcedure> _check_dl_preprocess_param_COPY_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "check_dl_preprocess_param_COPY_1"));
    private static Lazy<HDevProcedure> _color_string_to_rgb
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "color_string_to_rgb"));
    private static Lazy<HDevProcedure> _create_counting_result_text
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "create_counting_result_text"));
    private static Lazy<HDevProcedure> _create_tiny_example_dataset_with_result
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "create_tiny_example_dataset_with_result"));
    private static Lazy<HDevProcedure> _determine_optimum_pose_distance
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "determine_optimum_pose_distance"));
    private static Lazy<HDevProcedure> _dev_close_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_image_window"));
    private static Lazy<HDevProcedure> _dev_close_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_close_example_text_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_text_window"));
    private static Lazy<HDevProcedure> _dev_close_example_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_windows"));
    private static Lazy<HDevProcedure> _dev_close_window_dict
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_window_dict"));
    private static Lazy<HDevProcedure> _dev_display_dl_data
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_dl_data"));
    private static Lazy<HDevProcedure> _dev_display_example_reset_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_example_reset_windows"));
    private static Lazy<HDevProcedure> _dev_display_screen_device
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_device"));
    private static Lazy<HDevProcedure> _dev_display_screen_example_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_example_images"));
    private static Lazy<HDevProcedure> _dev_display_screen_final
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_final"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_1"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_2_part_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_2_part_1"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_2_part_2
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_2_part_2"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_3
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_3"));
    private static Lazy<HDevProcedure> _dev_display_screen_introduction
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_introduction"));
    private static Lazy<HDevProcedure> _dev_display_screen_max_overlap
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_max_overlap"));
    private static Lazy<HDevProcedure> _dev_display_screen_max_overlap_class_agnostic
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_max_overlap_class_agnostic"));
    private static Lazy<HDevProcedure> _dev_display_screen_min_confidence
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_min_confidence"));
    private static Lazy<HDevProcedure> _dev_display_screen_run_program
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_run_program"));
    private static Lazy<HDevProcedure> _dev_example_init
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_example_init"));
    private static Lazy<HDevProcedure> _dev_open_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_image_window"));
    private static Lazy<HDevProcedure> _dev_open_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_open_example_text_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_text_window"));
    private static Lazy<HDevProcedure> _dev_open_window_fit_size
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_window_fit_size"));
    private static Lazy<HDevProcedure> _dev_update_off
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_update_off"));
    private static Lazy<HDevProcedure> _disp_continue_button
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "disp_continue_button"));
    private static Lazy<HDevProcedure> _disp_message
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "disp_message"));
    private static Lazy<HDevProcedure> _disp_object_model_no_opengl
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "disp_object_model_no_opengl"));
    private static Lazy<HDevProcedure> _disp_text_button
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "disp_text_button"));
    private static Lazy<HDevProcedure> _display_result_box
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "display_result_box"));
    private static Lazy<HDevProcedure> _dump_image_output
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dump_image_output"));
    private static Lazy<HDevProcedure> _gen_arrow_contour_xld
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_arrow_contour_xld"));
    private static Lazy<HDevProcedure> _gen_arrow_object_model_3d
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_arrow_object_model_3d"));
    private static Lazy<HDevProcedure> _gen_cam_par_area_scan_division
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_cam_par_area_scan_division"));
    private static Lazy<HDevProcedure> _gen_dl_samples
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_dl_samples"));
    private static Lazy<HDevProcedure> _gen_dl_samples_from_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_dl_samples_from_images"));
    private static Lazy<HDevProcedure> _gen_robot_tool_and_base_object_model_3d
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "gen_robot_tool_and_base_object_model_3d"));
    private static Lazy<HDevProcedure> _get_cam_par_data
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_cam_par_data"));
    private static Lazy<HDevProcedure> _get_cam_par_names
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_cam_par_names"));
    private static Lazy<HDevProcedure> _get_distinct_colors
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_distinct_colors"));
    private static Lazy<HDevProcedure> _get_dl_sample_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_dl_sample_image"));
    private static Lazy<HDevProcedure> _get_example_inference_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_example_inference_images"));
    private static Lazy<HDevProcedure> _get_object_models_center
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_object_models_center"));
    private static Lazy<HDevProcedure> _make_neighboring_colors_distinguishable
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "make_neighboring_colors_distinguishable"));
    private static Lazy<HDevProcedure> _Oui
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Oui"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_3d_data
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_3d_data"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_anomaly
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_anomaly"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_augmentation_data
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_augmentation_data"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_augmentation_data_COPY_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_augmentation_data_COPY_1"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_images"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_images_COPY_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_images_COPY_1"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_images_ocr_recognition
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_images_ocr_recognition"));
    private static Lazy<HDevProcedure> _preprocess_dl_model_segmentations
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_model_segmentations"));
    private static Lazy<HDevProcedure> _preprocess_dl_samples
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "preprocess_dl_samples"));
    private static Lazy<HDevProcedure> _replace_legacy_preprocessing_parameters_COPY_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "replace_legacy_preprocessing_parameters_COPY_1"));
    private static Lazy<HDevProcedure> _scale_image_range
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "scale_image_range"));
    private static Lazy<HDevProcedure> _set_cam_par_data
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "set_cam_par_data"));
    private static Lazy<HDevProcedure> _set_display_font
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "set_display_font"));
    private static Lazy<HDevProcedure> _tuple_shuffle
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "tuple_shuffle"));
    private static Lazy<HDevProcedure> _tuple_vector_cross_product
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "tuple_vector_cross_product"));
    private static Lazy<HDevProcedure> _visualize_object_model_3d
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "visualize_object_model_3d"));
    private static Lazy<HDevProcedure> _xyz_attrib_to_object_model_3d
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "xyz_attrib_to_object_model_3d"));
        
    private static HTuple GetParameterHTuple(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamTuple(name);
    }

    private static HObject GetParameterHObject(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamObject(name);
    }

    private static HTupleVector GetParameterHTupleVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamVector(name);
    }

    private static HObjectVector GetParameterHObjectVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamVector(name);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTuple tuple)
    {
      call.SetInputCtrlParamTuple(name,tuple);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObject obj)
    {
      call.SetInputIconicParamObject(name,obj);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTupleVector vector)
    {
      call.SetInputCtrlParamVector(name,vector);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObjectVector vector)
    {
      call.SetInputIconicParamVector(name,vector);
    }

    private static void AddResourcePathToProcedurePath() 
    {
      lock(_procedure_path_lock)
      {
        if(!_procedure_path_initialized)
        {
          new HDevEngine().AddProcedurePath(ResourcePath);
          _procedure_path_initialized = true;
        }
      }
    }

#endregion

}
}